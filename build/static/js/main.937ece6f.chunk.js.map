{"version":3,"sources":["Components/YoutubeForm.js","App.js","reportWebVitals.js","index.js"],"names":["initialValues","name","email","channel","onSubmit","values","console","log","validationSchema","Yup","required","YoutubeForm","formik","useFormik","touched","handleSubmit","className","htmlFor","type","id","onChange","handleChange","onBlur","handleBlur","value","errors","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAIMA,EAAgB,CACpBC,KAAM,aACNC,MAAO,GACPC,QAAS,IAGLC,EAAW,SAACC,GAChBC,QAAQC,IAAI,YAAaF,IAmBrBG,EAAmBC,IAAW,CAClCR,KAAMQ,MAAaC,SAAS,YAC5BR,MAAOO,MAAaP,MAAM,uBAAuBQ,SAAS,YAC1DP,QAASM,MAAaC,SAAS,cA4ElBC,EAzEK,WAClB,IAAMC,EAASC,YAAU,CACvBb,gBACAI,WACAI,qBAMF,OAFAF,QAAQC,IAAI,iBAAkBK,EAAOE,SAGnC,8BACE,uBAAMV,SAAUQ,EAAOG,aAAvB,UACE,sBAAKC,UAAU,eAAf,UACE,wBAAOC,QAAQ,OAAf,UACG,IADH,QAEO,sBAAMD,UAAU,OAAhB,eAAgC,OAEvC,uBACEE,KAAK,OACLjB,KAAK,OACLkB,GAAG,OACHC,SAAUR,EAAOS,aACjBC,OAAQV,EAAOW,WACfC,MAAOZ,EAAOP,OAAOJ,OAEvB,qBAAKe,UAAU,QAAf,SACGJ,EAAOE,QAAQb,MAAQW,EAAOa,OAAOxB,KAClCW,EAAOa,OAAOxB,KACd,UAIR,sBAAKe,UAAU,eAAf,UACE,wBAAOC,QAAQ,QAAf,oBACS,sBAAMD,UAAU,OAAhB,kBAET,uBACEE,KAAK,QACLjB,KAAK,QACLkB,GAAG,QACHC,SAAUR,EAAOS,aACjBC,OAAQV,EAAOW,WACfC,MAAOZ,EAAOP,OAAOH,QAEtBU,EAAOE,QAAQZ,OAASU,EAAOa,OAAOvB,MACrC,qBAAKc,UAAU,QAAf,SAAwBJ,EAAOa,OAAOvB,QACpC,QAGN,sBAAKc,UAAU,eAAf,UACE,wBAAOC,QAAQ,UAAf,qBACU,sBAAMD,UAAU,OAAhB,kBAEV,uBACEE,KAAK,OACLjB,KAAK,UACLkB,GAAG,UACHC,SAAUR,EAAOS,aACjBC,OAAQV,EAAOW,WACfC,MAAOZ,EAAOP,OAAOF,UAEtBS,EAAOE,QAAQX,SAAWS,EAAOa,OAAOtB,QACvC,qBAAKa,UAAU,QAAf,SAAwBJ,EAAOa,OAAOtB,UACpC,QAGN,wBAAQe,KAAK,SAAb,0BC5FOQ,MARf,WACE,OACE,qBAAKV,UAAU,MAAf,SACE,cAAC,EAAD,OCMSW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.937ece6f.chunk.js","sourcesContent":["import React from \"react\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\n\nconst initialValues = {\n  name: \"Nihal shan\",\n  email: \"\",\n  channel: \"\",\n};\n\nconst onSubmit = (values) => {\n  console.log(\"form data\", values);\n};\n\nconst validate = (values) => {\n  // values.name values.email values.cahannel\n  // errors.name errors.email errors.channel\n  // errors.name = \"This is required\"\n  let errors = {};\n  errors.name = !values.name ? \"Required\" : \"\";\n  errors.email = !values.email\n    ? \"Required\"\n    : !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ? \"Invalid email address\"\n    : \"\";\n  errors.channel = !values.channel ? \"Required\" : \"\";\n\n  return errors;\n};\n\nconst validationSchema = Yup.object({\n  name: Yup.string().required(\"Required\"),\n  email: Yup.string().email(\"Invaid email format\").required(\"Required\"),\n  channel: Yup.string().required(\"Required\"),\n});\n\nconst YoutubeForm = () => {\n  const formik = useFormik({\n    initialValues,\n    onSubmit,\n    validationSchema,\n    // validate,\n  });\n\n  console.log(\"Visited fields\", formik.touched);\n\n  return (\n    <div>\n      <form onSubmit={formik.handleSubmit}>\n        <div className=\"form-control\">\n          <label htmlFor=\"name\">\n            {\" \"}\n            Name <span className=\"star\">*</span>{\" \"}\n          </label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"name\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.name}\n          />\n          <div className=\"error\">\n            {formik.touched.name && formik.errors.name\n              ? formik.errors.name\n              : null}\n          </div>\n        </div>\n\n        <div className=\"form-control\">\n          <label htmlFor=\"email\">\n            E-Mail <span className=\"star\">*</span>\n          </label>\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"email\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.email}\n          />\n          {formik.touched.email && formik.errors.email ? (\n            <div className=\"error\">{formik.errors.email}</div>\n          ) : null}\n        </div>\n\n        <div className=\"form-control\">\n          <label htmlFor=\"channel\">\n            Channel <span className=\"star\">*</span>\n          </label>\n          <input\n            type=\"text\"\n            name=\"channel\"\n            id=\"channel\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.channel}\n          />\n          {formik.touched.channel && formik.errors.channel ? (\n            <div className=\"error\">{formik.errors.channel}</div>\n          ) : null}\n        </div>\n\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n};\n\nexport default YoutubeForm;\n","import \"./App.css\";\nimport YoutubeForm from \"./Components/YoutubeForm\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <YoutubeForm />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}